---
description: 
globs: 
alwaysApply: true
---
# ThreadsPoster 系統架構與開發規範

本文檔描述 ThreadsPoster 系統的整體架構、模組職責以及開發規範，作為未來開發和維護的基礎參考。

## 系統架構

ThreadsPoster 是一個自動化發文系統，主要用於 Threads 平台。系統採用模組化設計，各組件職責明確，相互協作完成自動發文任務。

### 核心組件

```
ThreadsPoster
├── assets/                         # 圖片資源目錄
│   └── Luna_latest.png             # 圖片資源
├── config/                         # 配置文件目錄
│   ├── .env.example                # 環境變數範例
│   └── .env.bak                    # 環境變數備份
├── data/                           # 資料存儲目錄
│   ├── speaking_patterns_export.json # 說話模式匯出檔案
│   └── backups/                    # 資料庫備份
├── docs/                           # 文件目錄
│   ├── CHANGELOG.md                # 變更日誌
│   ├── CONTRIBUTING.md             # 貢獻指南
│   └── README.md.bak               # README備份
├── logs/                           # 日誌目錄
│   ├── threads_poster.log          # 主系統日誌
│   ├── app.log                     # 應用日誌
│   ├── main_output.log             # 主程式輸出日誌
│   ├── token_usage.log             # Token使用記錄
│   ├── db_operations/              # 資料庫操作日誌目錄
│   └── metrics/                    # 性能指標數據
├── src/                            # 源代碼目錄
│   ├── main.py                     # 主程式入口點
│   ├── monitor.py                  # 監控器，協調系統運行
│   ├── time_controller.py          # 時間控制器，管理發文時間和排程
│   ├── content_generator.py        # 內容生成器，產生發文內容
│   ├── speaking_patterns.py        # 說話模式模組，管理表達風格
│   ├── threads_handler.py          # Threads處理器，封裝發文操作
│   ├── threads_api.py              # Threads API接口，直接與API交互
│   ├── database.py                 # 資料庫操作
│   ├── db_handler.py               # 資料庫處理器，高級資料庫操作
│   ├── ai_handler.py               # AI處理器，處理AI相關功能
│   ├── openai_api.py               # OpenAI API接口
│   ├── performance_monitor.py      # 性能監控
│   ├── logger.py                   # 日誌記錄
│   ├── utils.py                    # 工具函數
│   ├── exceptions.py               # 自定義異常
│   ├── config.py                   # 配置管理
│   ├── retry.py                    # 重試機制
│   ├── scripts/                    # 工具腳本
│   │   └── update_copyright.py     # 更新版權信息腳本
│   └── tools/                      # 輔助工具
│       ├── tools.py                # 系統工具集
│       └── test_time_settings.py   # 時間設定測試工具
├── tests/                          # 測試目錄
│   ├── test_system.py              # 系統整體測試腳本
│   └── test_db_patterns.py         # 說話模式資料庫整合測試腳本
├── .env                            # 環境變數配置
├── LICENSE                         # 授權文件
├── README.md                       # 項目說明文檔
├── requirements.txt                # 依賴包列表
└── setup.py                        # 安裝腳本
```

### 組件職責

1. **主程式入口點 (main.py)**
   - 初始化所有系統組件
   - 處理系統啟動和停止
   - 設置信號處理
   - 協調組件間交互
   - 定期輸出資料庫統計

2. **監控器 (monitor.py)**
   - 協調系統運行
   - 管理發文流程
   - 處理系統循環
   - 監控系統狀態

3. **時間控制器 (time_controller.py)**
   - 生成發文計劃和排程
   - 計算發文時間
   - 管理時間區間規則
   - 分配晚間和日間發文比例

4. **內容生成器 (content_generator.py)**
   - 產生發文內容
   - 管理內容風格和主題
   - 協調內容生成流程
   - 調用說話模式模組獲取表達風格

5. **說話模式模組 (speaking_patterns.py)**
   - 管理不同場景的說話風格
   - 處理時間特定的表達方式
   - 提供系統提示詞模板
   - 與資料庫系統整合實現表達方式的永久記憶
   - 支援從資料庫批量載入和保存說話模式
   - 管理表情符號使用和文字風格
   - 優化記憶體快取以減少資料庫存取

6. **AI處理器 (ai_handler.py)**
   - 處理AI相關功能
   - 內容分析和情感評估
   - 管理AI記憶系統
   - 與說話模式模組整合實現個性化表達

7. **Threads處理器和API (threads_handler.py, threads_api.py)**
   - 處理發文操作
   - 與Threads平台交互
   - 管理API請求

8. **資料庫系統 (database.py, db_handler.py)**
   - 存儲發文記錄、說話模式和表達風格
   - 管理系統資料
   - 追蹤發文統計
   - 實現模組間的資料共享與永久記憶
   - 提供批量操作功能減少資料庫操作次數
   - 追蹤資料庫流量並輸出統計報告

9. **性能監控 (performance_monitor.py)**
   - 追蹤系統性能和資源使用
   - 記錄操作時間
   - 監控API請求
   - 資料庫操作統計
   - 生成性能報告
   - 記錄資料庫操作詳情

### 資料庫集合

系統使用MongoDB資料庫管理各類資料:

1. **articles**: 儲存文章內容和相關資訊
2. **posts**: 記錄所有發文的歷史和狀態
3. **personality_memories**: 保存AI人設的記憶和經驗
4. **speaking_patterns**: 存儲各種場景和時間的說話風格模式
5. **user_history**: 記錄用戶互動歷史

### 測試腳本

系統包含多個測試腳本，用於驗證功能和整合:

1. **test_system.py**: 測試系統整體功能和模組間協作
2. **test_db_patterns.py**: 專門測試說話模式模組的資料庫儲存和讀取功能
   - 測試默認說話模式的儲存
   - 測試新增說話模式的功能
   - 驗證從資料庫重新載入模式
   - 匯出說話模式到JSON檔案

### 運行流程

1. **啟動階段**:
   - 載入配置
   - 初始化資料庫
   - 初始化說話模式模組並從資料庫載入表達風格
   - 初始化API連接
   - 設置監控系統
   - 設置定期資料庫統計輸出

2. **運行階段**:
   - 生成發文計劃
   - 循環檢查發文時間
   - 生成內容並發布
   - 記錄發文狀態
   - 更新說話模式並保存到資料庫
   - 定期輸出資料庫流量統計

3. **發文流程**:
   - 檢查是否達到每日發文上限
   - 根據當前時間和場景選擇適當的說話模式
   - 生成文章內容，加入合適的表情符號
   - 分析內容情感
   - 發布到Threads平台
   - 儲存發文記錄
   - 更新下次發文時間

## 開發規範

### 代碼風格

1. **命名規則**
   - 類名：駝峰式 (如: `TimeController`, `SpeakingPatterns`)
   - 方法/函數：小寫_連接 (如: `get_next_post_time`, `load_patterns_from_db`)
   - 常量：大寫_連接 (如: `MAX_POSTS_PER_DAY`, `DEFAULT_EMOJI_COUNT`)
   - 私有方法：以下劃線開頭 (如: `_update_next_post_time`, `_initialize_default_speaking_styles`)

2. **文檔規範**
   - 所有公共方法必須有文檔字符串 (docstring)
   - 描述參數和返回值
   - 說明函數用途和行為
   - 類的定義必須有描述性文檔字符串

3. **日誌記錄**
   - 使用標準化格式 `【類別】具體訊息`
   - 使用分隔線區分主要流程 (`=======` 和 `----`)
   - 使用適當的日誌級別 (INFO, ERROR, DEBUG)
   - 詳細記錄異常和錯誤

### 錯誤處理

1. **異常捕獲**
   - 使用特定異常而非泛型異常
   - 在適當層級捕獲異常
   - 提供詳細的錯誤訊息
   - 使用 `traceback` 記錄詳細錯誤

2. **重試機制**
   - 網路操作應實現重試機制
   - 設置適當的超時
   - 避免無限重試循環

### 性能優化

1. **資源管理**
   - 正確關閉連接和資源
   - 使用 `asyncio` 進行非阻塞操作
   - 定期執行垃圾回收
   - 實現資料庫連接池管理
   - 使用記憶體快取減少資料庫查詢
   - 實現批量操作減少網絡請求

2. **監控與統計**
   - 使用性能監控追蹤關鍵操作
   - 記錄操作時間和資源使用
   - 定期分析性能瓶頸
   - 追蹤資料庫流量
   - 記錄資料庫操作詳情
   - 生成性能統計報告

### 配置管理

1. **環境變數**
   - 使用 `.env` 文件存儲配置
   - 關鍵參數需提供默認值
   - 避免硬編碼設定值

2. **配置優先級**
   - 代碼默認值 < 配置文件 < 環境變數 < 命令行參數

## 最佳實踐

1. **模組化設計**
   - 各組件職責單一明確
   - 降低組件間耦合
   - 設計易於測試的接口

2. **非同步操作**
   - 使用 `async/await` 進行異步操作
   - 避免阻塞主線程
   - 妥善管理非同步任務

3. **安全性**
   - 不在代碼中存儲敏感信息
   - 防止 API 密鑰洩露
   - 實施請求頻率限制

4. **可測試性**
   - 編寫單元測試
   - 使用依賴注入便於測試
   - 模擬外部服務

## 說話模式系統設計

### 場景分類
說話模式系統支援多種場景類型:
1. **base**: 基礎/日常場景
2. **gaming**: 遊戲相關場景
3. **social**: 社交互動場景
4. **night**: 夜間/深夜場景

### 時間特定模式
系統根據當前時間選擇不同的表達風格:
1. **morning**: 早晨模式 (06:00-12:00)
2. **afternoon**: 下午模式 (12:00-18:00)
3. **evening**: 晚上模式 (18:00-00:00)
4. **midnight**: 深夜模式 (00:00-06:00)

### 表達元素
每種場景和時間模式包含以下表達元素:
- 開場白: 用於文章開頭的表達
- 結尾句: 文章結束時的表達
- 口頭禪: 特定場景下的常用語
- 情感表達: 傳達情感的詞句
- 表情符號: 根據場景選擇的適當表情

### 資料庫整合
- 所有說話模式存儲在MongoDB的speaking_patterns集合
- 系統啟動時自動從資料庫載入模式
- 新增的表達方式會自動保存到資料庫
- 支援模式的導出和備份
- 記憶體快取技術優化資料庫存取頻率
- 批量讀寫操作減少資料庫負擔

## 功能拓展指南

新功能開發時需遵循以下步驟：

1. 在適當的模組中添加新功能
2. 遵循現有代碼風格和命名規範
3. 添加詳細的文檔和注釋
4. 實現適當的錯誤處理
5. 添加日誌記錄
6. 考慮性能和資源使用
7. 更新相關配置
8. 測試新功能
9. 更新版本號和變更日誌 